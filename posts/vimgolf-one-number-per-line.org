#+STARTUP: showall indent hidestars
#+BEGIN_COMMENT
.. title: vimgolf: One number per line
.. slug: vimgolf-one-number-per-line
.. date: 2018-01-18 11:02:17 UTC-08:00
.. tags: vim
.. category: 
.. link: 
.. description: 
.. type: text
#+END_COMMENT

* Solutions common patterns
** Link
vimgolf put 56fb2e75ccffcc0009026473

** Start file
#+BEGIN_EXAMPLE
- One number per line -
-----------------------
2,3,5,7,
11,13,17,
19,23,29,
#+END_EXAMPLE

** End file
#+BEGIN_EXAMPLE
2
3
5
7
11
13
17
19
23
29
#+END_EXAMPLE

** Deleting the first two lines
1. dj : d{motion} delete, j moves down one line
2. 2D : D delete the character under the cursor until the end of line
   and [count]-1 more lines

** Joining the lines
1. JxJx : Join and delete the extra character twice
2. 3J   : Joins three lines together
3. JJ   : Joins two lines together
4. 3gJ  : Same as 2, but doesn't remove indent or spaces

** Replacement
1. :s/,/\r/g              : sed like replacement
2. :s/,/<C-V><CR>/g<CR>   : same as above but inserts a control character
3. 0qqwr<CR>q9@q          : goes to first char in line
                            record typed characters into register 'q'
                            wr: macro does a word movement and a char replacement
                            9@q : execute the contents of 'q' 9 times
4. Iwr<CR><Esc>u9@.       : similar to the one above but goes to
                            current register
5. V"=[<C-R><C-A>]<CR>p   : V : visual line
                            "= expression register
                            [ ] list
                            <C-R> cursor moves to the command-line
                            <C-A> this normally adds to the number at
                            the cursor, not sure what this C-A does
                            p : put command
                            <C-R><C-A> seems to get the word at
                            the cursor of the selected text

** Comments in vimgolf:

jdupont655: @chunleng: <C-R><C-A> is one of several ways to
automatically insert some text on the command line, when this text is
already under the cursor in the buffer.

Depending on type of text, you can hit different mappings:

- <C-R><C-W> for a word,
- <C-R><C-A> for a WORD,
- <C-R><C-F> for a filepath,
- <C-R><C-P> for an expanded filepath.

Here, when you hit <C-R><C-A>, your cursor is on one of the digits, so
the WORD under the cursor is ------...2,...,29,. Besides, the number
of minus signs in front of the number 2 is even (24; 1 at the end of
the first line, then 23 on the second one). So, ----...2 evaluates to
the positive number 2. Finally, you replace the line by putting the
evaluation of an expression given through the expression register
("={expr}p). Here, the expression is a list ([2, ..., 29]), and when
you ask to put a list, Vim puts each of its item on a separate line.

** References:
- "= : [[http://vimdoc.sourceforge.net/htmldoc/change.html#quote=][vimdoc]]
- [[https://stackoverflow.com/questions/1276403/simple-vim-commands-you-wish-youd-known-earlier][useful Potpourri]]
- [[https://stackoverflow.com/questions/1497958/how-do-i-use-vim-registers][Registers]]
- [[https://books.google.com/books?id=wx5O0JLesi0C&pg=PT183&lpg=PT183&dq=vim+the+equal+register&source=bl&ots=vWwaLy30rd&sig=3fOvxidlUFgcby7_9WGxkCE9MY8&hl=en&sa=X&ved=0ahUKEwiW2qDEkeLYAhVC-mMKHfflA944ChDoAQgnMAA#v=onepage&q=vim%20the%20equal%20register&f=false][Expression register]]
- [[http://vimdoc.sourceforge.net/htmldoc/insert.html#i_CTRL-R][:h i_Ctrl-R]]
